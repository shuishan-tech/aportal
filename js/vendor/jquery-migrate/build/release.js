#!/usr/bin/env node
var releaseVersion,nextVersion,finalFiles,isBeta,pkg,dryrun=!1,skipRemote=!1,fs=require("fs"),child=require("child_process"),path=require("path"),chalk=require("chalk"),repoURL="git@github.com:jquery/jquery-migrate.git",branch="master",gruntCmd="win32"===process.platform?"grunt.cmd":"grunt",npmCmd="win32"===process.platform?"npm.cmd":"npm",readmeFile="README.md",packageFile="package.json",versionFile="src/version.js",devFile="dist/jquery-migrate.js",minFile="dist/jquery-migrate.min.js",releaseFiles={"CDN/jquery-migrate-VER.js":devFile,"CDN/jquery-migrate-VER.min.js":minFile};function initialize(e){"-d"===process.argv[2]&&(process.argv.shift(),dryrun=!0,console.warn("=== DRY RUN MODE ===")),"-r"===process.argv[2]&&(process.argv.shift(),skipRemote=!0,console.warn("=== SKIPREMOTE MODE ==="));var i=/^(\d+)\.(\d+)\.(\d+)(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$/,r=i.exec(process.argv[2]||"")||[],n=r[1],s=r[2],t=r[3],o=r[4];releaseVersion=process.argv[2],isBeta=!!o,releaseVersion||(log("Usage: release [ -d -r ] releaseVersion"),log("       -d  Dry-run; no commands are executed at all"),log("       -r  Skip-remote; nothing is pushed externally"),die("Invalid args")),r.length||die("'"+releaseVersion+"' is not a valid semver!"),"pre"===o&&die("Cannot release a 'pre' version!"),(fs.existsSync||path.existsSync)(packageFile)||die("No "+packageFile+" in this directory"),status("Current version is "+(pkg=JSON.parse(fs.readFileSync(packageFile))).version+"; generating release "+releaseVersion),1e4*+n+100*+s+ +t<1e4*+(r=i.exec(pkg.version))[1]+100*+r[2]+ +r[3]&&die("Next version is older than current version!"),nextVersion=n+"."+s+"."+(isBeta?t:+t+1)+"-pre",e()}function checkGitStatus(n){child.execFile("git",["status"],function(e,i){var r=((i||"").match(/On branch (\S+)/)||[])[1];r!==branch&&die("Branches don't match: Wanted "+branch+", got "+r),/Changes to be committed/i.test(i)&&die("Please commit changed files before attemping to push a release."),/Changes not staged for commit/i.test(i)&&die("Please stash files before attempting to push a release."),n()})}function tagReleaseVersion(e){git(["commit","-a","--no-verify","-m","Tagging the "+releaseVersion+" release."],function(){git(["tag",releaseVersion],e)})}function updateVersions(e){updateSourceVersion(releaseVersion),updateReadmeVersion(releaseVersion),updatePackageVersion(releaseVersion),e()}function gruntBuild(n){exec(gruntCmd,[],function(e,i,r){e&&die(e+r),log(i||"(no output)"),n()})}function makeReleaseCopies(e){finalFiles={},Object.keys(releaseFiles).forEach(function(e){var i=releaseFiles[e],e=e.replace(/VER/g,releaseVersion);copy(i,e),finalFiles[e]=i}),e()}function publishToNPM(e){exec(npmCmd,isBeta?["publish","--tag","beta"]:["publish"],e,skipRemote)}function setNextVersion(e){updateSourceVersion(nextVersion),updatePackageVersion(nextVersion,"master"),git(["commit","-a","--no-verify","-m","Updating the source version to "+nextVersion],e)}function pushToRemote(e){git(["push","--tags",repoURL,branch],e,skipRemote)}function remindAboutCDN(e){console.log(chalk.red("TODO: Update CDN with jquery-migrate."+releaseVersion+" files (min and regular)")),console.log(chalk.red("  clone codeorigin.jquery.com, git add files, commit, push")),e()}function remindAboutSites(e){console.log(chalk.red("TODO: Update jquery.com download page to "+releaseVersion)),e()}function steps(){var i=0,r=arguments;!function e(){process.nextTick(function(){r[i++](e)})}()}function updatePackageVersion(e,i){status("Updating "+packageFile+" version to "+e),i=i||e,pkg.version=e,pkg.author.url=setBlobVersion(pkg.author.url,i),writeJsonSync(packageFile,pkg)}function updateSourceVersion(e){e='\njQuery.migrateVersion = "'+e+'";\n';status("Updating "+e.replace(/\n/g,"")),dryrun||fs.writeFileSync(versionFile,e)}function updateReadmeVersion(){var e=fs.readFileSync(readmeFile,"utf8");isBeta?status("Skipping "+readmeFile+" update (beta release)"):(status("Updating "+readmeFile),e=e.replace(/jquery-migrate-\d+\.\d+\.\d+(?:-\w+)?/g,"jquery-migrate-"+releaseVersion),dryrun||fs.writeFileSync(readmeFile,e))}function setBlobVersion(e,i){return e.replace(/\/blob\/(?:(\d+\.\d+[^\/]+)|master)/,"/blob/"+i)}function writeJsonSync(e,i){dryrun?console.log(JSON.stringify(i,null,"  ")):fs.writeFileSync(e,JSON.stringify(i,null,"\t")+"\n")}function copy(e,i){status("Copying "+e+" to "+i),dryrun||fs.writeFileSync(i,fs.readFileSync(e,"utf8"))}function git(e,i,r){exec("git",e,i,r)}function exec(e,i,n,r){dryrun||r?(log(chalk.black.bgBlue("# "+e+" "+i.join(" "))),n()):(log(chalk.green(e+" "+i.join(" "))),child.execFile(e,i,{env:process.env},function(e,i,r){e&&die(r||i||e),n()}))}function status(e){console.log(chalk.black.bgGreen(e))}function log(e){console.log(e)}function die(e){console.error(chalk.red("ERROR: "+e)),process.exit(1)}function exit(){process.exit(0)}steps(initialize,checkGitStatus,gruntBuild,updateVersions,tagReleaseVersion,gruntBuild,makeReleaseCopies,publishToNPM,setNextVersion,pushToRemote,remindAboutCDN,remindAboutSites,exit);